// function testingScope(escopo) {
//     if (escopo === true) {
//         var ifScope = 'NÃ£o devo ser utilizada fora do meu escopo (if)';
//         ifScope = ifScope + ' Ã³timo, fui utilizada no escopo !';
//         console.log(ifScope);
//     } else {
//         var elseScope = 'NÃ£o devo ser utilizada fora meu escopo (else)';
//         console.log(elseScope);
//     }
//     console.log(ifScope + ' o que estou fazendo aqui ? :O'); // Se necessÃ¡rio esta linha pode ser removida.
// }testingScope(true);

// Refatorando o cÃ³digo:

let ifScope = 'NÃ£o devo ser utilizada fora do meu escopo (if)';
let elseScope = 'NÃ£o devo ser utilizada fora do meu escopo (else)'
const testingScope = escopo =>
    escopo ? `${ifScope}, Ã³timo, fui utilizada no escopo !` : `${elseScope}`;

console.log(testingScope(true));

console.log('------------------- Parte 2 -------------------');

// Utilize template literals para que a chamada console.log(<seu cÃ³digo>oddsAndEvens<seu cÃ³digo>); retorne "Os nÃºmeros 2,3,4,7,10,13 se encontram ordenados de forma crescente!".

const oddsAndEvens = [
    13,
    3,
    4,
    10,
    7,
    2
];

const orderConsts = (a, b) => a - b;

console.log(`Os nÃºmeros, ${oddsAndEvens.sort(orderConsts)
    }, se encontram ordenados de forma crescente!`); // serÃ¡ necessÃ¡rio alterar essa linha ðŸ˜‰
console.log('--------------------------------------');
console.log('Outra forma de resolver tambÃ©m, Ã© com uma arrow function dentro do prÃ³rio sort:');

console.log(`Os nÃºmeros, ${oddsAndEvens.sort((a, b) => a - b)
    }, se encontram de forma crescente!`);